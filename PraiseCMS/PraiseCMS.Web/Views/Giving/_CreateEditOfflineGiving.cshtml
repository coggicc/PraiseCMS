@model PraiseCMS.DataAccess.Models.OfflineGivingView
<div id="manual-gift-div">
    <div id="alert-container"></div>
    @using (Html.BeginForm(RouteHelpers.CurrentAction, RouteHelpers.CurrentController, FormMethod.Post, new { @class = "form", id = "offlineGivingForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.OfflineGiving.Id)
        @Html.HiddenFor(x => x.OfflineGiving.ChurchId)
        @Html.HiddenFor(x => x.OfflineGiving.CreatedBy)
        @Html.HiddenFor(x => x.OfflineGiving.CreatedDate)
        @Html.HiddenFor(x => x.OfflineGivingType)
        @Html.HiddenFor(x => x.Mode)
        if (!string.IsNullOrEmpty(Model.OfflineGivingType) && Model.OfflineGivingType.Equals(OfflineGiftAmountTypes.LumpSum))
        {
            <div class="alert alert-custom alert-notice alert-light-primary mb-5 fade show" role="alert">
                <div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div>
                <div class="alert-text"><strong>Note:</strong> Use this form to add giving in bulk or if you are unable to apply giving to a specific donor.</div>
                <div class="alert-close">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true"><i class="ki ki-close"></i></span>
                    </button>
                </div>
            </div>
        }
        if (!string.IsNullOrEmpty(Model.OfflineGivingType) && Model.OfflineGivingType.Equals(OfflineGiftAmountTypes.Donor))
        {
            <div class="alert alert-custom alert-notice alert-light-primary mb-5 fade show" role="alert">
                <div class="alert-icon"><i class="fas fa-exclamation-circle"></i></div>
                <div class="alert-text"><strong>Note:</strong> This form allows giving to be applied to a single donor. Select an existing donor or add a new one.</div>
                <div class="alert-close">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true"><i class="ki ki-close"></i></span>
                    </button>
                </div>
            </div>
            <div id="system">
                <label>Donor:*</label>
                <div class="form-group row">
                    <div class="@Html.Raw(RouteHelpers.CurrentAction.ContainsIgnoreCase("edit")? "col-lg-12" : "col-lg-10")">
                        @Html.DropDownListFor(x => x.OfflineGiving.PersonId, Model.People.ToSelectList(x => x.DisplayWithAddress, x => x.Id), "Select a donor...", new { onchange = "validateForm(this)", @class = "form-control select2", style = "width:100%;" })
                        @Html.ValidationMessageFor(x => x.OfflineGiving.PersonId, "", new { @class = "text-danger" })
                    </div>
                    @if (!RouteHelpers.CurrentAction.ContainsIgnoreCase("edit"))
                    {
                        <div class="col-lg-2">
                            <button data-toggle="tooltip" title="Add new donor" style="float:right" type="button" class="btn btn-light-primary font-weight-bold mr-2" onclick="toggle()"><i class="fas fa-user-plus"></i></button>
                        </div>
                    }
                </div>
            </div>
            <div id="manual" style="display:none">
                <div class="row">
                    <div class="form-group col-lg">
                        <label>First Name:*</label>
                        @Html.EditorFor(x => x.Person.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Person.FirstName, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-lg">
                        <label>Last Name:*</label>
                        @Html.EditorFor(x => x.Person.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(x => x.Person.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-lg">
                        <label>Email:</label>
                        @Html.EditorFor(x => x.Person.Email, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="form-group col-lg">
                        <label>Phone:</label>
                        @Html.EditorFor(x => x.Person.PhoneNumber, new { htmlAttributes = new { @class = "form-control phone" } })
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg">
                        <button style="float:right" type="button" class="btn btn-light-primary font-weight-bold mr-2" onclick="toggle()">Cancel</button>
                    </div>
                </div>
            </div>
        }
        if (!string.IsNullOrEmpty(Model.OfflineGivingType) && Model.OfflineGivingType.Equals(OfflineGiftAmountTypes.Donor))
        {
            <div class="form-group row">
                <div class="col-lg">
                    <label>Payment Method:*</label>
                    @Html.DropDownListFor(x => x.OfflineGiving.OfflinePaymentMethod, OfflinePaymentMethods.Items.ToSelectList(x => x), new { @class = "form-control select2", style = "width:100%;" })
                    @Html.ValidationMessageFor(x => x.OfflineGiving.OfflinePaymentMethod, "", new { @class = "text-danger" })
                </div>
                <div id="check-number-div" class="col-lg" style="display:none">
                    <label>Check #:</label>
                    @Html.TextBoxFor(x => x.OfflineGiving.CheckNumber, new { @class = "form-control numeric" })
                    @Html.ValidationMessageFor(x => x.OfflineGiving.CheckNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group row">
            <div class="form-group col-lg">
                <label>Gift Received Via:</label>
                @Html.DropDownListFor(x => x.OfflineGiving.OfflinePaymentType, OfflinePaymentTypes.Items.ToSelectList(x => x), "Select how the gift was received...", new { @class = "form-control select2", style = "width:100%;" })
            </div>
            <div class="form-group col-lg">
                <label>Campus:*</label>
                @Html.DropDownListFor(x => x.OfflineGiving.CampusId, SessionVariables.Campuses.ToSelectList(x => x.Display, x => x.Id, x => SessionVariables.Campuses.Count() == 1 && x.Id == SessionVariables.Campuses.First().Id), "Select a campus...", new { @class = "form-control select2" })
                @Html.ValidationMessageFor(x => x.OfflineGiving.CampusId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="form-group col-lg">
                <label>Date Received:*</label>
                <div class="input-group date">
                    @Html.TextBoxFor(x => x.OfflineGiving.DateReceived, "{0:MM/dd/yyyy}", new { @class = "form-control datepicker", placeholder = "MM/DD/YYYY", autocomplete = "off" })
                    <div class="input-group-append">
                        <span class="input-group-text">
                            <i class="far fa-calendar-alt"></i>
                        </span>
                    </div>
                </div>
                @Html.ValidationMessageFor(x => x.OfflineGiving.DateReceived, "", new { @class = "text-danger" })
            </div>
        </div>
        <table id="payments" class="table table-responsive-lg table-responsive-md table-responsive-sm table-responsive-xl w-100 border-0">
            <thead>
                <tr>
                    <td><label>Amount*</label></td>
                    <td><label>Fund*</label></td>
                    <td class="text-right" width="5%"><label></label></td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <div class="form-group">
                            <div class="input-group">
                                <input type="text" name="amount" placeholder="$0.00" class="form-control currency amount numeric" />
                            </div>
                        </div>
                    </td>
                    <td id="fund-list">
                        <div class="form-group">
                            <select name="fund" class="form-control select2 fund" style="width:100%;">
                                <option>Select a fund...</option>
                                @foreach (var fund in Model.Funds)
                                {
                                    <option value="@fund.Id">@fund.Display</option>
                                }
                            </select>
                        </div>
                    </td>
                    <td>
                        <div class="form-group">
                            <a onclick="remove(this)" class="btn btn-light-dark btn-sm font-weight-bold"><i class="fa fa-times pr-0"></i></a>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="form-group" style="padding-left: 1rem;">
            <a onclick="splitDonation()" class="btn btn-light-primary font-weight-bold btn-sm">Split Donation</a>
        </div>
    }
</div>
<script src="~/Scripts/datatables.min.js"></script>
<script type="text/javascript">
    var validation=[];
    var paymentsDataTable;
    var funds= "<option>Select a fund...</option>";
    $(function () {
        validationStep();
        paymentsDataTable = $('#payments').dataTable({
            responsive: true,
            bFilter: false,
            bInfo: false,
            bPaginate: false,
            bLengthChange: false,
            bAutoWidth: false,
            searching: false,
            ordering: false,
            pageLength: 100,
            orderable: false,
            language: { "emptyTable": "Click <a onclick='splitDonation()' href='#'>here</a> to add a new record"}
        });

        $.each(@Html.Raw(Json.Encode(Model.Funds)), function (key, value) {
            funds += '<option value="' + value.Id + '">' + value.Display + '</option>';
        });

        if ('@Model.Mode' === '@PeopleSelectionMode.Manual') {
            $('#manual').show();
            $('#system').hide();
        } else {
            $('#Person_LastName').val("FirstName");
            $('#Person_FirstName').val("LastName");
        }
       if ($('#OfflineGiving_OfflinePaymentMethod').val() === '@OfflinePaymentMethods.Check') {
            $('#check-number-div').show();
        } else {
            $('#check-number-div').hide();
            $('#OfflineGiving_CheckNumber').val('');
        }
    });

    $("#offlineGivingForm").submit(function (e) {
        e.preventDefault();
        validation[0].validate().then(function (status) {
            if (status === 'Valid') {
                submit();
            }
            setTimeout(function () {
                StopLoading();
           });
        });
    });

    function submit() {
        StartLoading();
        $("#alert-container").html("");
        var success = true;
        var paymentsArray = [];
        var rows = paymentsDataTable.fnGetNodes();
        if (!rows.length) {
            Swal.fire({
                text: "Please add giving for at least one donor before saving.",
                icon: "warning",
                buttonsStyling: false,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn font-weight-bold btn-light"
                }
            });
            return false;
        }
        for (var i = 0; i < rows.length; i++) {
            let amount = $(rows[i]).find(".amount").val();
            if (!amount) {
                success = false;
                $(rows[i]).find(".amount").addClass('is-invalid');
            }
            let fund = $(rows[i]).find(".fund").val();
            if (!fund || fund === 'Select a fund...') {
                success = false;
                $(rows[i]).find(".fund").next().children().children('.select2-selection').css('border', '1px solid #F64E60');
            }
            let payment = { "Amount": amount, "FundId": fund };
            paymentsArray.push(payment);
        }
        if (!success) {
            Swal.fire({
                text: "Please fill out all of the required fields.",
                icon: "warning",
                buttonsStyling: false,
                confirmButtonText: "Ok, got it!",
                customClass: {
                    confirmButton: "btn font-weight-bold btn-light"
                }
            });
            return false;
        }
        let offlineGiving = {
            "PersonId": $('#OfflineGiving_PersonId').val(),
            "ChurchId": $('#OfflineGiving_ChurchId').val(),
            "CampusId": $('#OfflineGiving_CampusId').val(),
            "OfflinePaymentType": $('#OfflineGiving_OfflinePaymentType').val(),
            "OfflinePaymentMethod": $('#OfflineGiving_OfflinePaymentMethod').val(),
            "DateReceived": $('#OfflineGiving_DateReceived').val(),
            "CheckNumber": $('#OfflineGiving_CheckNumber').val(),
            "CreatedBy": $('#OfflineGiving_CreatedBy').val(),
            "CreatedDate": $('#OfflineGiving_CreatedDate').val()
        };
        let person = {
            "PhoneNumber": $('#Person_PhoneNumber').val(),
            "Email": $('#Person_Email').val(),
            "LastName": $('#Person_LastName').val(),
            "FirstName": $('#Person_FirstName').val()
        };
        let form = {
            "OfflineGiving": offlineGiving,
            "Payments": paymentsArray,
            "Person": person,
            "OfflineGivingType": $('#OfflineGivingType').val(),
            "Mode": $('#Mode').val()
        };
        $.ajax({
            type: "POST",
            url: '/Giving/CreateOfflineGiving',
            data: form,
            success: function (result) {
                StopLoading();
                if (result.Success) {
                    location.reload();
                } else {
                    ShowErrorAlert(result.Message);
                }
            },
            error: function (result) {
                StopLoading();
                ShowErrorAlert(result.Message);
            }
        });
    }

    $(document).on('keyup', '.amount', function (e) {
        if ($(this).val()) {
            $(this).removeClass('is-invalid');
        }
    });

    $(document).on('change', '.fund', function (e) {
        if ($(this).val() && $(this).val() !== 'Select a fund...') {
            $(this).next().children().children('.select2-selection').css('border', '1px solid #E5EAEE');
        }
    });

    function validateForm(self) {
        if ($(self).val()) {
            $(self).removeClass('is-invalid');
            var msg = $(self).parent('.form-group').children('.fv-plugins-message-container');
            msg.html('');
        }
    }

    function validationStep() {
        const form = document.getElementById('offlineGivingForm');
        validation.push(FormValidation.formValidation(form,
            {
                fields: {
                    'OfflineGiving.CampusId': { validators: { notEmpty: { message: 'Please select a campus.' } } },
                    'OfflineGiving.DateReceived': { validators: { notEmpty: { message: 'Please select a date received.' } } },
                    'OfflineGiving.PersonId': {
                        validators: {
                            callback: {
                                message: 'Please select a donor for giving.',
                                callback: function (input) {
                                    let type = form.querySelector('[name="OfflineGivingType"]').value;
                                    let mode = form.querySelector('[name="Mode"]').value;
                                    if (type === 'Donor' && mode === '@PeopleSelectionMode.System') {
                                        return input.value ? true : false;
                                    } else {
                                        return true;
                                    }
                                }
                            }
                        }
                    },
                    'Person.FirstName': {
                        validators: {
                            callback: {
                                message: 'Please enter a first name.',
                                callback: function (input) {
                                    let type = form.querySelector('[name="OfflineGivingType"]').value;
                                    let mode = form.querySelector('[name="Mode"]').value;
                                    if (type === 'Donor' && mode === '@PeopleSelectionMode.Manual') {
                                        return input.value ? true : false;
                                    } else {
                                        return true;
                                    }
                                }
                            }
                        }
                    },
                    'Person.LastName': {
                        validators: {
                            callback: {
                                message: 'Please enter a last name.',
                                callback: function (input) {
                                    let type = form.querySelector('[name="OfflineGivingType"]').value;
                                    let mode = form.querySelector('[name="Mode"]').value;
                                    if (type === 'Donor' && mode === '@PeopleSelectionMode.Manual') {
                                        return input.value ? true : false;
                                    } else {
                                        return true;
                                    }
                                }
                            }
                        }
                    },
                },
                plugins: {
                    trigger: new FormValidation.plugins.Trigger,
                    bootstrap: new FormValidation.plugins.Bootstrap({ eleValidClass: "" })
                }
            }));
    }

    function splitDonation() {
        let col_1 = '<div class="form-group"><input type="text" name="amount" placeholder="$0.00" class="form-control currency amount numeric"/></div></div>';
        let col_2 = '<div class="form-group"><select name="fund" class="form-control select2 fund" style="width:100%;">' + funds + '</select></div>';
        let col_3 = '<div class="form-group"><a class="btn btn-light-dark btn-sm font-weight-bold" onclick="remove(this)"><i class="fa fa-times pr-0"></i></a></div>';
        paymentsDataTable.fnAddData([col_1, col_2, col_3]);
        paymentsDataTable.fnDraw();
    }

    function remove(btn) {
        let parent = $(btn).parents('tr');
        paymentsDataTable.fnDeleteRow(parent);
        paymentsDataTable.fnDraw();
    }

    $('.amount').on('input propertychange paste', function (e) {
        var reg = /^0+/gi;
        if (this.value.match(reg)) {
            this.value = this.value.replace(reg, '');
        }
    });

    $(document).on('change', '#OfflineGiving_OfflinePaymentMethod', function (e) {
        if ($(this).val() === '@OfflinePaymentMethods.Check') {
            $('#check-number-div').show();
        } else {
            $('#check-number-div').hide();
            $('#OfflineGiving_CheckNumber').val('');
        }
    });

    function toggle() {
        const mode = $('#Mode').val();
        if (mode==='@PeopleSelectionMode.Manual') {
            $('#manual').hide();
            $('#system').show();
            $('#Person_LastName').val("FirstName");
            $('#Person_FirstName').val("LastName");
            $('#Mode').val('@PeopleSelectionMode.System');
        } else if (mode === '@PeopleSelectionMode.System') {
            $('#manual').show();
            $('#system').hide();
            $('#OfflineGiving_PersonId').val("");
            $('#Person_Email').val("");
            $('#Person_LastName').val("");
            $('#Person_FirstName').val("");
            $('#Person_PhoneNumber').val("");
            $('#Mode').val('@PeopleSelectionMode.Manual');
        }
    }
</script>