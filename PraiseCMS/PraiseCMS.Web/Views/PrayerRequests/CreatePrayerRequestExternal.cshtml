@model PraiseCMS.DataAccess.Models.PrayerRequestVM
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <base href="">
    <meta charset="utf-8">
    <title>Prayer Requests | Praise CMS</title>
    <meta name="description" content="Updates and statistics">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700|Roboto:300,400,500,600,700">
    <link href="/Content/assets/plugins/global/plugins.bundle.css?v=7.0.4" rel="stylesheet" type="text/css">
    <link href="/Content/assets/css/style.bundle.css?v=7.0.4" rel="stylesheet" type="text/css">
    <script src="/Content/assets/plugins/global/plugins.bundle.js?v=7.0.4"></script>
    <script src="/Scripts/jquery.mask.js"></script>
</head>
<body id="kt_body">
    <div class="d-flex flex-column flex-root">
        <div class="d-flex flex-row flex-column-fluid page">
            <div class="d-flex flex-column flex-row-fluid wrapper" id="kt_wrapper">
                <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
                    <div class="d-flex flex-column-fluid">
                        <div class="container">
                            <div class="card">
                                @Html.Partial("~/Views/Shared/_Alert.cshtml")

                                @using (Html.BeginForm(RouteHelpers.CurrentAction, RouteHelpers.CurrentController, FormMethod.Post, new { @class = "form", id = "prayer-request-form" }))
                                {
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(x => x.PrayerRequest.Id)
                                    @Html.HiddenFor(x => x.PrayerRequest.ChurchId)
                                    @Html.HiddenFor(x => x.PrayerRequest.CreatedBy)
                                    @Html.HiddenFor(x => x.PrayerRequest.CreatedDate)
                                    @Html.HiddenFor(x => x.Mode)
                                    <div class="card-body">
                                        <h2 class="font-size-h2-xl text-dark font-weight-bold mb-6">Create Prayer Request</h2>
                                        <div id="manual">
                                            <div class="row">
                                                <div class="col-lg form-group">
                                                    <label>First Name:</label>
                                                    @Html.EditorFor(x => x.Person.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                                </div>
                                                <div class="col-lg form-group">
                                                    <label>Last Name:</label>
                                                    @Html.EditorFor(x => x.Person.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-lg form-group">
                                                    <label>Email:</label>
                                                    <div class="input-group">
                                                        <div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-envelope"></i></span></div>
                                                        @Html.EditorFor(x => x.Person.Email, new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                </div>
                                                <div class="col-lg form-group">
                                                    <label>Phone:</label>
                                                    <div class="input-group">
                                                        <div class="input-group-prepend"><span class="input-group-text"><i class="fas fa-phone"></i></span></div>
                                                        @Html.EditorFor(x => x.Person.PhoneNumber, new { htmlAttributes = new { @class = "form-control phone" } })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg form-group">
                                                <label>Would you like to share your name with the prayer team?</label>
                                                <select class="form-control select2" name="PrayerRequest.ShareName" style="width:100%">
                                                    <option value="true">Yes</option>
                                                    <option value="false">No</option>
                                                </select>
                                                <span class="form-text">By choosing "No", your request will be shared with the pastoral staff only.</span>
                                            </div>
                                            <div class="col-lg-6 form-group">
                                                <label>Would you like to be contacted about your prayer request?</label>
                                                <select class="form-control select2" name="PrayerRequest.FollowUpRequired" id="PrayerRequest_FollowUpRequired" style="width:100%">
                                                    <option value="false">No</option>
                                                    <option value="true">Yes</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg form-group">
                                                <label class="font-weight-bold">My Prayer Request is:</label>
                                                <div class="radio-inline">
                                                    <label class="radio radio-solid">
                                                        <input type="radio" name="PrayerRequest.Confidential" checked="checked" value="false" /> For the Prayer Team
                                                        <span></span>
                                                    </label>
                                                    <label class="radio radio-solid">
                                                        <input type="radio" name="PrayerRequest.Confidential" value="true" /> Confidential
                                                        <span></span>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label>Prayer Request:</label>
                                            @Html.TextAreaFor(x => x.PrayerRequest.Message, new { @class = "form-control", rows = "5" })
                                            @Html.ValidationMessageFor(x => x.PrayerRequest.Message, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="card-footer">
                                        <div class="row">
                                            <div class="col-lg-6">
                                                <button type="submit" class="btn btn-primary mr-2">Submit</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>var KTAppSettings = { "breakpoints": { "sm": 576, "md": 768, "lg": 992, "xl": 1200, "xxl": 1200 }, "colors": { "theme": { "base": { "white": "#ffffff", "primary": "#3699FF", "secondary": "#E5EAEE", "success": "#1BC5BD", "info": "#8950FC", "warning": "#FFA800", "danger": "#F64E60", "light": "#F3F6F9", "dark": "#212121" }, "light": { "white": "#ffffff", "primary": "#E1F0FF", "secondary": "#ECF0F3", "success": "#C9F7F5", "info": "#EEE5FF", "warning": "#FFF4DE", "danger": "#FFE2E5", "light": "#F3F6F9", "dark": "#D6D6E0" }, "inverse": { "white": "#ffffff", "primary": "#ffffff", "secondary": "#212121", "success": "#ffffff", "info": "#ffffff", "warning": "#ffffff", "danger": "#ffffff", "light": "#464E5F", "dark": "#ffffff" } }, "gray": { "gray-100": "#F3F6F9", "gray-200": "#ECF0F3", "gray-300": "#E5EAEE", "gray-400": "#D6D6E0", "gray-500": "#B5B5C3", "gray-600": "#80808F", "gray-700": "#464E5F", "gray-800": "#1B283F", "gray-900": "#212121" } }, "font-family": "Poppins" };</script>
    <script src="/Content/assets/js/scripts.bundle.js?v=7.0.4"></script>
    <script src="/Scripts/global.js?v=v1.0.0"></script>
    <script src="/Content/assets/js/pages/crud/forms/widgets/select2.js?v=7.0.4"></script>
    <script src="/Content/assets/js/pages/custom/jquery-ui/jquery-ui.bundle.js"></script>
    <script src="/Scripts/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>
    <script src="/Scripts/form-validate/form-validate.js?v=v1.0.0"></script>
    <script type="text/javascript">
        var validation = [];
        var persons = @Html.Raw(Json.Encode(Model.People));

        $(function () {
            validationStep();
            document.getElementById('prayer-request-form').reset();
        });

        function validationStep() {
            const form = document.getElementById('prayer-request-form');
            validation.push(FormValidation.formValidation(form,
                {
                    fields: {
                        'PrayerRequest.Message': { validators: { notEmpty: { message: "Please enter a prayer request." } } },
                        'People.FirstName': {
                            validators: {
                                callback: {
                                    message: 'Please enter your first name.',
                                    callback: function (input) {
                                        let mode = form.querySelector('[name="Mode"]').value;
                                        if (mode === 'Manual') {
                                            let fName = input.value;
                                            return fName ? true : false;
                                        } else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                        'People.LastName': {
                            validators: {
                                callback: {
                                    message: 'Please enter your last name.',
                                    callback: function (input) {
                                        let mode = form.querySelector('[name="Mode"]').value;
                                        if (mode === 'Manual') {
                                            let lName = input.value;
                                            return lName ? true : false;
                                        } else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                        'People.Email': {
                            validators: {
                                callback: {
                                    message: 'Please enter an email address.',
                                    callback: function (input) {
                                        let mode = form.querySelector('[name="Mode"]').value;
                                        if (mode === 'Manual') {
                                            if (input.value) {
                                                return  true;
                                            } else {
                                                return false;
                                            }
                                        } else {
                                            return true;
                                        }
                                    }
                                },
                                emailAddress:{ message: 'Please enter a valid email address' }
                           }
                        },
                        'People.PhoneNumber': {
                            validators: {
                                callback: {
                                    message: 'Please enter a valid 10 digit phone number.',
                                    callback: function (input) {
                                        let mode = form.querySelector('[name="Mode"]').value;
                                        if (mode === 'Manual') {
                                            if (input.value) {
                                                const length = parseInt(input.value.replace(/\D/g, "").length);
                                            return (length === 10) ? true : false;
                                            } else {
                                                return false;
                                            }
                                        }
                                        else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger,
                        bootstrap: new FormValidation.plugins.Bootstrap({ eleValidClass: "" })
                    }
                }
            ));
        }

        $("#prayer-request-form").submit(function (e) {
            e.preventDefault(e);
            validation[0].validate().then(function (status) {
                if (status === 'Valid') {
                    document.getElementById('prayer-request-form').submit();
                }
                setTimeout(function() {
                    StopLoading();
                });
            });
        });

        function validateForm(self) {
            if ($(self).val()) {
                $(self).removeClass('is-invalid');
                $(self).parents('.form-group').children('.fv-plugins-message-container').html('');
            }
        }
    </script>
</body>
</html>