@using PraiseCMS.Shared.Methods
@model PraiseCMS.DataAccess.Models.ViewModels.PrayerRequestDetailsViewModel

@{
    var category = Model.PrayerRequestCategories.FirstOrDefault(x => x.Id.Equals(Model.PrayerRequest.CategoryId));
}

<style>
    .icon-click:hover {
        cursor: pointer;
    }

    .close .fa-times-circle:hover {
        color: #3699FF;
    }

    @@media print {
        .tooltip {
            visibility: hidden;
        }
    }
</style>

<div class="card card-custom card-stretch" id="kt_todo_view">
    <div class="card-header align-items-center flex-wrap justify-content-between border-0 py-6 h-auto">
        <div class="d-flex align-items-center my-2 d-print-none">
            <div class="d-flex align-items-center">
                <a class="btn btn-clean btn-icon btn-sm mr-6" data-toggle="tooltip" title="Back" data-inbox="back" onclick="clearIds()">
                    <i class="flaticon2-left-arrow-1"></i>
                </a>
                <button class="btn btn-default btn-icon btn-sm mr-2" data-toggle="tooltip" title="@(Model.PrayerRequest.Read ? "Mark as unread" : "Mark as read")" data-action="@(Model.PrayerRequest.Read ? PrayerRequestStatuses.Unread : PrayerRequestStatuses.Read)" onclick="markRead(this)">
                    <span class="svg-icon svg-icon-md">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <rect x="0" y="0" width="24" height="24"></rect>
                                <path d="M6,2 L18,2 C18.5522847,2 19,2.44771525 19,3 L19,12 C19,12.5522847 18.5522847,13 18,13 L6,13 C5.44771525,13 5,12.5522847 5,12 L5,3 C5,2.44771525 5.44771525,2 6,2 Z M7.5,5 C7.22385763,5 7,5.22385763 7,5.5 C7,5.77614237 7.22385763,6 7.5,6 L13.5,6 C13.7761424,6 14,5.77614237 14,5.5 C14,5.22385763 13.7761424,5 13.5,5 L7.5,5 Z M7.5,7 C7.22385763,7 7,7.22385763 7,7.5 C7,7.77614237 7.22385763,8 7.5,8 L10.5,8 C10.7761424,8 11,7.77614237 11,7.5 C11,7.22385763 10.7761424,7 10.5,7 L7.5,7 Z" fill="#000000" opacity="0.3"></path>
                                <path d="M3.79274528,6.57253826 L12,12.5 L20.2072547,6.57253826 C20.4311176,6.4108595 20.7436609,6.46126971 20.9053396,6.68513259 C20.9668779,6.77033951 21,6.87277228 21,6.97787787 L21,17 C21,18.1045695 20.1045695,19 19,19 L5,19 C3.8954305,19 3,18.1045695 3,17 L3,6.97787787 C3,6.70173549 3.22385763,6.47787787 3.5,6.47787787 C3.60510559,6.47787787 3.70753836,6.51099993 3.79274528,6.57253826 Z" fill="#000000"></path>
                            </g>
                        </svg>
                    </span>
                </button>
                <button class="btn btn-default btn-icon btn-sm mr-2" data-toggle="tooltip" title="@(Model.PrayerRequest.PrayedOver ? "Mark as not prayed over" : "Mark as prayed over")" onclick="archiveData('@(Model.PrayerRequest.PrayedOver ? "Not PrayedOver" : PrayerRequestStatuses.PrayedOver)')">
                    <span class="svg-icon svg-icon-md">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <polygon points="0 0 24 0 24 24 0 24" />
                                <path d="M16.5,4.5 C14.8905,4.5 13.00825,6.32463215 12,7.5 C10.99175,6.32463215 9.1095,4.5 7.5,4.5 C4.651,4.5 3,6.72217984 3,9.55040872 C3,12.6834696 6,16 12,19.5 C18,16 21,12.75 21,9.75 C21,6.92177112 19.349,4.5 16.5,4.5 Z" fill="#000000" fill-rule="nonzero" />
                            </g>
                        </svg>
                    </span>
                </button>
                <button class="btn btn-default btn-icon btn-sm mr-2" data-toggle="tooltip" title="Print" onclick="window.print()">
                    <span class="svg-icon svg-icon-md">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <rect x="0" y="0" width="24" height="24" />
                                <path d="M16,17 L16,21 C16,21.5522847 15.5522847,22 15,22 L9,22 C8.44771525,22 8,21.5522847 8,21 L8,17 L5,17 C3.8954305,17 3,16.1045695 3,15 L3,8 C3,6.8954305 3.8954305,6 5,6 L19,6 C20.1045695,6 21,6.8954305 21,8 L21,15 C21,16.1045695 20.1045695,17 19,17 L16,17 Z M17.5,11 C18.3284271,11 19,10.3284271 19,9.5 C19,8.67157288 18.3284271,8 17.5,8 C16.6715729,8 16,8.67157288 16,9.5 C16,10.3284271 16.6715729,11 17.5,11 Z M10,14 L10,20 L14,20 L14,14 L10,14 Z" fill="#000000" />
                                <rect fill="#000000" opacity="0.3" x="8" y="2" width="8" height="2" rx="1" />
                            </g>
                        </svg>
                    </span>
                </button>
                @if (Model.PrayerRequest.FollowUpRequired)
                {
                    if (!Model.PrayerRequest.FollowUpCompleted)
                    {
                        @Html.AjaxModalLink("<span class='btn btn-default btn-icon btn-sm mr-2'><span class='svg-icon svg-icon-md'><i class='fas fa-user-check text-hover-primary'></i></span></span>", $"/prayerRequests/FollowUp/{Model.PrayerRequest.Id}", "Add Follow-Up Details", "Save", "", "")
                    }
                }
                @if (Model.PrayerRequest.CreatedBy.Equals(SessionVariables.CurrentUser.User.Id))
                {
                    @Html.AjaxModalLink("<i class='fas fa-pencil-alt'></i>", $"/prayerrequests/_EditPrayerRequest?id={Model.PrayerRequest.Id}", "Edit Prayer Request", "Save", "btn btn-default btn-icon btn-sm", "", "", "", false, ModalSizes.Large)
                }
            </div>
        </div>
        <div class="d-flex align-items-center justify-content-end text-right my-2 d-print-none">
            <a href="#" onclick="markStarred('@Model.PrayerRequest.Id')" class="btn btn-icon btn-xs starred-@Model.PrayerRequest.Id @Html.Raw(Model.PrayerRequest.Starred ? "marked" : "unmarked")" data-toggle="tooltip" data-placement="right" title="@Html.Raw(Model.PrayerRequest.Starred ? "Starred" : "Not starred")">
                @Html.Raw(Model.PrayerRequest.Starred ? "<i class='fas fa-star text-warning'></i>" : "<i class='far fa-star text-muted'></i>")
            </a>
            @if (!Model.PrayerRequest.PrayedOver && Model.PrayerRequest.CreatedDate.Date < DateTime.Now.AddDays(-7).Date)
            {
                <span class="label label-light-danger label-pill label-inline label-lg text-uppercase font-weight-bold mr-2" data-toggle="tooltip" title="" data-original-title="Older than 7 days - Not prayed over">@(Model.PrayerRequest.CreatedDate.ToShortDateYearString())</span>
            }
            else if (!Model.PrayerRequest.PrayedOver)
            {
                <span class="label label-light-primary label-pill label-inline label-lg text-uppercase font-weight-bold mr-2" data-toggle="tooltip" title="" data-original-title="Not prayed over">@(Model.PrayerRequest.CreatedDate.ToShortDateYearString())</span>
            }

            @if (Model.PrayerRequest.PrayedOver)
            {
                <span class="label label-light-success label-pill label-inline label-lg text-uppercase font-weight-bold mr-2" data-toggle="tooltip" title="" data-original-title="Prayed Over">@(Model.PrayerRequest.CreatedDate.ToShortDateYearString())</span>
            }
            <a data-inbox="back" class="ml-2 icon-click close d-print-none" data-toggle="tooltip" title="Close" onclick="clearIds()"><i class="far fa-times-circle"></i></a>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="d-flex align-items-center justify-content-between flex-wrap card-spacer-x py-3">
            <div class="d-flex flex-column mr-2 py-2">
                @if (category != null)
                {
                    <span class="text-dark font-weight-bold font-size-h4 mr-3">@category.Display</span>
                }
                <div class="py-1">
                    @if (Model.PrayerRequest.PrayedOver)
                    {
                        <span class="label label-outline-dark label-md font-weight-bold label-inline" data-toggle="tooltip" data-placement="right" title="@Model.PrayerRequest.PrayedOverDate"><i class="fa fa-heart text-light-dark mr-2"></i> Prayed Over</span>
                    }
                    @if (Model.PrayerRequest.HighPriority)
                    {
                        <span class="label label-outline-danger label-md font-weight-bold label-inline"><i class="fa fa-exclamation-circle text-danger mr-2"></i> High Priority</span>
                    }
                    @if (Model.PrayerRequest.Confidential)
                    {
                        <span class="label label-outline-warning label-md font-weight-bold label-inline"><i class="fa fa-lock text-warning mr-2"></i> Confidential</span>
                    }
                    @if (Model.PrayerRequest.FollowUpRequired)
                    {
                        <span class="label label-outline-info label-md font-weight-bold label-inline"> <i class="fas fa-user-check text-info mr-2"></i> Follow-Up Required</span>
                    }
                    @if (Model.PrayerRequest.Responded)
                    {
                        <span class="label label-outline-success label-md font-weight-bold label-inline"><i class="fa fa-check-circle text-success mr-2"></i> Responded @Convert.ToDateTime(Model.PrayerRequest.RespondedDate).ToShortDateString()</span>
                    }
                </div>
            </div>
        </div>
        <div class="mb-3">
            <div class="toggle-on" data-inbox="message">
                <div class="d-flex align-items-start card-spacer-x py-4">
                    <div class="d-flex flex-column flex-grow-1 flex-wrap mr-2">
                        <div class="d-flex">
                            <span class="font-size-lg font-weight-bolder text-dark-75 mr-2">@(Model.Person.IsNotNullOrEmpty() ? Model.Person.Display : "[No Person Assigned]")</span>
                            <div class="font-weight-bold text-muted">
                                @if (Model.PrayerRequest.PrayedOver)
                                {
                                    <span class="label label-success label-dot mr-2" data-toggle="tooltip" data-original-title="Prayed Over"></span>
                                }
                                else
                                {
                                    <span class="label label-danger label-dot mr-2" data-toggle="tooltip" data-original-title="Not Prayed Over"></span>
                                }
                                <span class="d-print-none" data-toggle="tooltip" data-original-title="Date Created">@Model.PrayerRequest.CreatedDate.ToShortDateAndTimeString()</span>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.PrayerRequest.FollowUpRequired && Model.PrayerRequest.FollowUpStatus.IsNotNullOrEmpty() && Model.PrayerRequest.FollowUpMethod.IsNotNullOrEmpty() && Model.PrayerRequest.FollowUpDate.IsNotNullOrEmpty())
                {
                    <div class="card-spacer-x pb-5">
                        <div class="row">
                            <div class="col-lg-6">
                                <div style="border:4px solid #F3F6F9; padding: 1.75rem 1.5rem;">
                                    <h6>Follow-Up Details</h6>
                                    <div class="d-flex flex-wrap align-items-center py-2">
                                        <div class="text-center mr-6">
                                            <div class="font-weight-bold text-dark-50">Status</div>
                                            @{
                                                var statusIcon = "";
                                                var statusColor = "";
                                                switch (Model.PrayerRequest.FollowUpStatus)
                                                {
                                                    case FollowUpStatuses.Incomplete:
                                                        statusIcon = "fas fa-check-circle";
                                                        statusColor = "text-light-dark";
                                                        break;
                                                    case FollowUpStatuses.AttemptedToContact:
                                                        statusIcon = "fas fa-phone-slash";
                                                        statusColor = "text-warning";
                                                        break;
                                                    case FollowUpStatuses.Completed:
                                                        statusIcon = "fas fa-check-circle";
                                                        statusColor = "text-success";
                                                        break;
                                                    default:
                                                        statusIcon = "fas fa-check-circle";
                                                        statusColor = "text-light-dark";
                                                        break;
                                                }
                                            }
                                            <span data-toggle="tooltip" data-original-title="@Model.PrayerRequest.FollowUpStatus"><i class="@statusIcon @statusColor"></i></span>
                                        </div>
                                        <div class="text-center mr-6">
                                            <div class="font-weight-bold text-dark-50">Method</div>
                                            @{
                                                var methodIcon = "";
                                                switch (Model.PrayerRequest.FollowUpMethod)
                                                {
                                                    case FollowUpMethods.Email:
                                                        methodIcon = "fas fa-envelope";
                                                        break;
                                                    case FollowUpMethods.Phone:
                                                        methodIcon = "fas fa-phone";
                                                        break;
                                                    case FollowUpMethods.InPerson:
                                                        methodIcon = "fas fa-people-arrows";
                                                        break;
                                                    case FollowUpMethods.Other:
                                                        methodIcon = "fas fa-ellipsis-h";
                                                        break;
                                                    default:
                                                        methodIcon = "fas fa-ellipsis-h";
                                                        break;
                                                }
                                            }
                                            <span data-toggle="tooltip" data-original-title="@Model.PrayerRequest.FollowUpMethod"><i class="@methodIcon"></i></span>
                                        </div>
                                        @if (Model.PrayerRequest.FollowUpMethod.Equals(FollowUpMethods.Phone))
                                        {
                                            <div class="text-center mr-6">
                                                <div class="font-weight-bold text-dark-50">Phone</div>
                                                <span>@(Model.Person.PhoneNumber.IsNotNullOrEmpty() ? Model.Person.PhoneNumber : "")</span>
                                            </div>
                                        }
                                        <div class="text-center mr-6">
                                            <div class="font-weight-bold text-dark-50">By:</div>
                                            <span>@(Model.PrayerRequest.FollowUpUser.IsNotNullOrEmpty() ? Model.PrayerRequest.FollowUpUser.Display : "")</span>
                                        </div>
                                        <div class="text-center">
                                            <div class="font-weight-bold text-dark-50">Date:</div>
                                            <span>@Convert.ToDateTime(Model.PrayerRequest.FollowUpDate).ToShortDateAndTimeString()</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="card-spacer-x pt-2 pb-5 toggle-off-item">
                    <div class="mb-1">
                        <h6>Prayer Request</h6>
                        <p>@Model.PrayerRequest.Message</p>
                    </div>
                </div>
            </div>
        </div>
        @*<div class="card-spacer-x pb-10 pt-5 @Model.PrayerRequest.Id" id="kt_todo_reply" style="display:none;">
                <div class="card card-custom shadow-sm">
                    @using (Ajax.BeginForm("RespondToPrayerRequest", RouteHelpers.CurrentController, new AjaxOptions() { HttpMethod = "Post", InsertionMode = InsertionMode.Replace, UpdateTargetId = "pr_details" }, new { @class = "form", id = "pr_details_form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(x => x.PrayerRequest.Id)
                        @Html.HiddenFor(x => x.PrayerRequest.CreatedBy)
                        @Html.HiddenFor(x => x.PrayerRequest.CreatedDate)
                        @Html.HiddenFor(x => x.PrayerRequest.PrayedOver)
                        @Html.HiddenFor(x => x.PrayerRequest.HighPriority)
                        @Html.HiddenFor(x => x.PrayerRequest.Confidential)
                        @Html.HiddenFor(x => x.PrayerRequest.Responded)
                        @Html.HiddenFor(x => x.PrayerRequest.PrayedOver)
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="card-body">
                            <h1>What happens here now that response message was removed?</h1>
                            <h3 class="font-size-lg text-dark font-weight-bold mb-6">Response:</h3>
                            <div class="form-group">
                                <label>Internal Note:</label>
                                @Html.TextAreaFor(x => x.PrayerRequest.InternalNote, new { @class = "form-control", rows = "5", placeholder = "Add a note only visible to your prayer request team." })
                                <span class="form-text">Note: This will not be sent to the recipient.</span>
                            </div>
                            <div class="d-flex align-items-center justify-content-between py-5 pl-8 pr-5 border-top">
                                <div class="d-flex align-items-center mr-3">
                                    <button type="submit" class="btn btn-light-primary font-weight-bold mr-2">Send</button>
                                    <button type="reset" class="btn btn-light-dark font-weight-bold toggle-selector" data-selector=".@Model.PrayerRequest.Id">Cancel</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>*@
    </div>
</div>

<script type="text/javascript">
    window.scrollTo(0, 0);
    selectedIds = [];
    selectedIds.push('@Model.PrayerRequest.Id');
</script>