@using PraiseCMS.Shared.Methods
@model PraiseCMS.DataAccess.Models.ChurchMerchantAccountVM

@{
    ViewBag.Title = "Create Merchant Account for " + Model.Church.Display;
}

<div class="card card-custom">
    <div class="card-header">
        <div class="card-title">
            <h3 class="card-label">@ViewBag.Title</h3>
        </div>
        <div class="card-toolbar">
            @if (!string.IsNullOrEmpty(Model.Church.Logo))
            {
                <img src=@Html.AmazonLink(Model.Church.Logo,"Uploads/Logos") style="max-width:35px; max-height:35px;" />
            }
        </div>
    </div>
    <div class="card-body">
        @using (Html.BeginForm(RouteHelpers.CurrentAction, RouteHelpers.CurrentController, FormMethod.Post, new { @class = "form", enctype = "multipart/form-data", id = "super-admin-merchant-form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.Church.Id)
            @Html.HiddenFor(x => x.Church.Email)
            @Html.HiddenFor(x => x.Church.PhysicalAddress1)
            @Html.HiddenFor(x => x.Church.PhysicalAddress2)
            @Html.HiddenFor(x => x.Church.PhysicalCity)
            @Html.HiddenFor(x => x.Church.PhysicalState)
            @Html.HiddenFor(x => x.Church.PhysicalZip)
            @Html.HiddenFor(x => x.Account.Id)
            @Html.HiddenFor(x => x.Account.CreatedBy)
            @Html.HiddenFor(x => x.Account.CreatedDate)

            <div class="mb-15">
                <div class="form-group row">
                    <div class="col-lg-6">
                        <h3 class="font-size-lg text-dark font-weight-bold mb-6">Giving Account Info:</h3>
                    </div>
                    <div class="col-lg-6">
                        <h3 class="font-size-lg text-dark font-weight-bold mb-6">Church Info:</h3>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Bank Account Type:</label>
                        @Html.DropDownListFor(x => x.Account.BankAccountType, BankAccountTypes.Items.ToSelectList("Select a bank account type...", x => x, x => x), new { onchange = "validateForm(this)", @class = "form-control select2", name = "BankAccountType", style = "width:100%;" })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Church Legal Name:</label>
                        @Html.EditorFor(x => x.Church.LegalName, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Account Number:</label>
                        @Html.EditorFor(x => x.Account.AccountNumber, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Business Type:</label>
                        @Html.DropDownListFor(x => x.Account.BusinessType, CompanyOwnershipTypes.Items.ToSelectList("Select a business type...", x => x), new { onchange = "validateForm(this)", @class = "form-control select2", name = "BusinessType", style = "width:100%;" })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row" id="confirmAccountNumberContainer" style="display:none;">
                    <div class="col-lg-6">
                        <label>Confirm Account Number:</label>
                        <input type="text" id="ConfirmAccountNumber" name="ConfirmAccountNumber" class="form-control" />
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Routing Number:</label>
                        @Html.EditorFor(x => x.Account.RoutingNumber, new { htmlAttributes = new { @class = "form-control", id = "PaymentAccount_RoutingNumber" } })
                        <div class="routing-feedback"></div>
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Tax Id#:</label>
                        @Html.EditorFor(x => x.Church.TaxIdNumber, new { htmlAttributes = new { onkeyup = "validateForm(this)", @class = "form-control taxid", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6 offset-lg-6">
                        <label>Website</label>
                        @Html.EditorFor(x => x.Church.Website, new { htmlAttributes = new { @class = "form-control", placeholder = "Ex: www.google.com" } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="separator separator-dashed my-5"></div>
                <h3 class="font-size-lg text-dark font-weight-bold mb-6">Financial Contact Person:</h3>
                <p>
                    Who is responsible for managing the church's financial accounts? This is typically a pastor, president, founder, executive director, etc.
                </p>
                <p class="small">
                    USA Patriot Act: To help the government fight the funding of terrorism and money laundering activities, Federal law requires that we obtain, verify and record
                    information that identifies each person who opens an account. Therefore, we may ask for your name, address, date of birth and other information that allows us
                    to identify you. We also ask to see your driver's license or other identifying documents.
                </p>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>First Name:</label>
                        @Html.EditorFor(x => x.Account.RespContactFirstName, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Last Name:</label>
                        @Html.EditorFor(x => x.Account.RespContactLastName, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Phone:</label>
                        @Html.EditorFor(x => x.Account.RespContactPhone, new { htmlAttributes = new { onkeyup = "validateForm(this)", @class = "form-control phone", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Email:</label>
                        @Html.EditorFor(x => x.Account.RespContactEmail, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>DOB:</label>
                        @Html.EditorFor(x => x.Account.RespContactDOB, new { htmlAttributes = new { placeholder = "MM/dd/yyyy", Value = !string.IsNullOrEmpty(Convert.ToString(Model.Account.RespContactDOB)) ? Convert.ToDateTime(Model.Account.RespContactDOB).ToString("MM'/'dd'/'yyyy") : "", @class = "form-control dateOfBirth numeric", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>SSN:</label>
                        @Html.EditorFor(x => x.Account.RespContactSSN, new { htmlAttributes = new { maxlength = "11", type = "text", @class = "form-control" } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Driver's License Number:</label>
                        @Html.EditorFor(x => x.Account.RespContactDLN, new { htmlAttributes = new { maxlength = "20", type = "text", @class = "form-control" } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-6">
                        <label>Address:</label>
                        @Html.EditorFor(x => x.Account.RespContactAddress1, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-6">
                        <label>Apt/Unit/Suite:</label>
                        @Html.EditorFor(x => x.Account.RespContactAddress2, new { htmlAttributes = new { @class = "form-control" } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-lg-4">
                        <label>City:</label>
                        @Html.EditorFor(x => x.Account.RespContactCity, new { htmlAttributes = new { @class = "form-control", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-4">
                        <label>State:</label>
                        @Html.DropDownListFor(x => x.Account.RespContactState, Constants.GetAbbrevToStateAsDropdown().OrderBy(x => x.Text), "Select a state...", new { onchange = "validateForm(this)", @class = "form-control select2", style = "width:100%;" })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                    <div class="col-lg-4">
                        <label>Zip:</label>
                        @Html.EditorFor(x => x.Account.RespContactZip, new { htmlAttributes = new { maxlength = "5", @class = "form-control numeric", } })
                        <div class="fv-plugins-message-container"></div>
                    </div>
                </div>
            </div>
            <div class="inner-card-footer">
                <a onclick="submit()" class="btn btn-light-primary mr-2">Save Changes</a>
            </div>
        }
    </div>
</div>
@section belowScripts
{
    <script type="text/javascript">
        var validation = [];
        $(function () {
            if ($('#Account_AccountNumber').val()) {
                $('#ConfirmAccountNumber').val($('#Account_AccountNumber').val());
            }

            const FORM = document.getElementById('super-admin-merchant-form');
            validation.push(FormValidation.formValidation(FORM,
                {
                    fields: {
                        'Church.LegalName': { validators: { notEmpty: { message: "Please enter the church's legal name." } } },
                        'Church.TaxIdNumber': {
                            validators: {
                                notEmpty: { message: "Please enter a tax id number." },
                                callback: {
                                    message: 'Please enter a valid nine digit Tax ID #.',
                                    callback: function (input) {
                                        let taxId = FORM.querySelector('[name="Church.TaxIdNumber"]').value;
                                        return (taxId.indexOf('X') === -1) ? true : false;
                                    }
                                }
                            }
                        },
                        'Church.Website': {
                            validators:
                            {
                                callback: {
                                    message: 'Please enter a valid church Website.',
                                    callback: function () {
                                        const regexp = /^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/;
                                        let val = FORM.querySelector('[name="Church.Website"]').value;
                                        if (!val) {
                                            return true;
                                        }
                                        else if (regexp.test(val)) {
                                            return true;
                                        } else {
                                            return false;
                                        }
                                    }
                                }
                            }
                        },
                        'Account.RoutingNumber': { validators: { notEmpty: { message: "Please enter a routing number." } } },
                        'Account.AccountNumber': { validators: { notEmpty: { message: "Please enter an account number." } } },
                        'ConfirmAccountNumber': {
                            validators: {
                                callback: {
                                    message: 'Please enter a matching account number.',
                                    callback: function () {
                                        const val = FORM.querySelector('[name="Account.AccountNumber"]').value;
                                        if (val) {
                                            const number = FORM.querySelector('[name="ConfirmAccountNumber"]').value;
                                            return parseInt(val) == parseInt(number) ? true : false;
                                        } else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                        'Account.BankAccountType': { validators: { notEmpty: { message: "Please select a bank account type." } } },
                        'Account.BusinessType': { validators: { notEmpty: { message: "Please select a business type." } } },
                        'Account.RespContactFirstName': { validators: { notEmpty: { message: "Please enter a first name." } } },
                        'Account.RespContactLastName': { validators: { notEmpty: { message: "Please enter a last name." } } },
                        'Account.RespContactEmail': {
                            validators: {
                                notEmpty: { message: "Please enter an email." },
                                emailAddress: { message: 'Please enter a valid email address.' }
                            }
                        },
                        'Account.RespContactPhone': {
                            validators: {
                                notEmpty: { message: "Please enter a phone number." },
                                callback: {
                                    message: 'Please enter a valid 10 digit phone number.',
                                    callback: function () {
                                        const val = FORM.querySelector('[name="Account.RespContactPhone"]').value;
                                        if (val) {
                                            const length = parseInt(val.replace(/\D/g, "").length);
                                            return (length === 10) ? true : false;
                                        } else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                        'Account.RespContactSSN': {
                            validators: {
                                callback: {
                                    message: 'Please enter a valid SSN.',
                                    callback: function () {
                                        let val = FORM.querySelector('[name="Account.RespContactSSN"]').value;

                                        if (val) {
                                            // Remove non-numeric characters
                                            const cleanedSSN = val.replace(/\D/g, "");

                                            // Check if the cleaned SSN has the correct length
                                            if (cleanedSSN.length === 9) {
                                                // Update the input field with the cleaned SSN
                                                FORM.querySelector('[name="Account.RespContactSSN"]').value = cleanedSSN;
                                                return true;
                                            } else {
                                                FORM.querySelector('[name="Account.RespContactSSN"]').focus();
                                                // Display an error message
                                                $("#validation_SSN").text("Please enter a valid SSN.");
                                                validateForm = false;
                                                return false;
                                            }
                                        } else {
                                            return true;
                                        }
                                    }
                                }
                            }
                        },
                        'Account.RespContactDOB': {
                            validators: {
                                notEmpty: { message: "Please enter a Date of birth." },
                                date: {
                                    format: 'MM/DD/YYYY',
                                    message: 'Please enter a valid date.',
                                }
                            }
                        },
                        'Account.RespContactDLN': {
                            validators: {
                                notEmpty: { message: "Please enter a Driver's License Number." }
                            }
                        },
                        'Account.RespContactCity': { validators: { notEmpty: { message: "City is required" } } },
                        'Account.RespContactState': { validators: { notEmpty: { message: "Select a state" } } },
                        'Account.RespContactZip': { validators: { notEmpty: { message: "Zip is required" } } },
                        'Account.RespContactAddress1': { validators: { notEmpty: { message: "Address is required" } } }
                    },
                    plugins: {
                        trigger: new FormValidation.plugins.Trigger,
                        bootstrap: new FormValidation.plugins.Bootstrap({ eleValidClass: "" })
                    }
                }))
        });

        function submit() {
            // e.preventDefault();
            validation[0].validate().then(function (status) {
                if (status === 'Valid') {
                    StartLoading();

                    const form = document.getElementById('super-admin-merchant-form');
                    if (form.Church_Website.value) {
                        const prefix1 = 'http://';
                        const prefix2 = 'https://';
                        if (form.Church_Website.value.substr(0, prefix1.length) !== prefix1 && form.Church_Website.value.substr(0, prefix2.length) !== prefix2) {
                            form.Church_Website.value = prefix1 + form.Church_Website.value;
                        }
                    }

                    form.submit();
                }
            });
        };

        function validateForm(self) {
            if ($(self).val()) {
                $(self).removeClass('is-invalid');
                $(self).siblings('.fv-plugins-message-container').html('');
            }
        }

        $(document).on('blur', '#Account_AccountNumber', function () {
            if ($(this).val()) {
                $('#confirmAccountNumberContainer').css('display', 'block');
            } else {
                $('#confirmAccountNumberContainer').css('display', 'none');
            }
        });
    </script>
}