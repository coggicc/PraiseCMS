@model PraiseCMS.DataAccess.Models.Room
@{
    var buildings = ViewData.ContainsKey("Buildings") ? (List<Building>)ViewData["Buildings"] : new List<Building>();
    var floors = ViewData.ContainsKey("Floors") ? (List<Floor>)ViewData["Floors"] : new List<Floor>();
}
<div id="room-div">
    @using (Ajax.BeginForm(RouteHelpers.CurrentAction, RouteHelpers.CurrentController, new AjaxOptions() { HttpMethod = "Post", InsertionMode = InsertionMode.Replace, UpdateTargetId = "room-div" }, new { @class = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.Id)
        @Html.HiddenFor(x => x.ChurchId)
        @Html.HiddenFor(x => x.CreatedBy)
        @Html.HiddenFor(x => x.CreatedDate)

        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Name:</label>
            <div class="col-lg-8">
                @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Campus:</label>
            <div class="col-lg-8">
                @Html.DropDownListFor(x => x.CampusId, new SelectList(SessionVariables.Campuses, "Id", "Name", SessionVariables.Campuses.Count() == 1 ? SessionVariables.Campuses.First().Id : null), "Select a campus...", new { @class = "form-control select2", style = "width:100%;" })
                @Html.ValidationMessageFor(x => x.CampusId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Building:</label>
            <div class="col-lg-8">
                @Html.DropDownListFor(x => x.BuildingId, new SelectList(new List<Building>(), "Id", "BuildingName", buildings.Count() == 1 && SessionVariables.Campuses.Count() == 1 ? buildings.First().Id : null), "Select a building...", new { @class = "form-control select2", style = "width:100%;" })
                @Html.ValidationMessageFor(x => x.BuildingId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Floor:</label>
            <div class="col-lg-8">
                @Html.DropDownListFor(x => x.FloorId, new SelectList(new List<Floor>(), "Id", "FloorName", buildings.Count() == 1 && SessionVariables.Campuses.Count() == 1 && floors.Count() == 1 ? floors.First().Id : null), "Select a floor...", new { @class = "form-control select2", style = "width:100%;" })
                @Html.ValidationMessageFor(x => x.FloorId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Capacity:</label>
            <div class="col-lg-8">
                @Html.TextBoxFor(x => x.Capacity, new { value = "", @class = "form-control numeric", maxLength = "5" })
                @Html.ValidationMessageFor(x => x.Capacity, "", new { @class = "text-danger" })
                <span class="form-text">Max # of people that can be checked into a room.</span>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Phone:</label>
            <div class="col-lg-8">
                @Html.TextBoxFor(x => x.Phone, new { @class = "form-control phone" })
                @Html.ValidationMessageFor(x => x.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-4 col-form-label">Description:</label>
            <div class="col-lg-8">
                @Html.TextAreaFor(x => x.Description, new { @class = "form-control", rows = 3 })
                @Html.ValidationMessageFor(x => x.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <label class="col-lg-6 col-form-label">Available for check-ins?</label>
            <div class="col-lg-6">
                <span class="switch switch-icon">
                    <label>
                        @Html.CheckBoxFor(x => x.Status, new { @class = "form-control" })
                        <span></span>
                    </label>
                </span>
            </div>
        </div>
    }
</div>
@section belowScripts
{
    <script type="text/javascript">
        var buildingsList = @Html.Raw(Json.Encode(buildings));
        var floorList = @Html.Raw(Json.Encode(floors));
        var campusList = @Html.Raw(Json.Encode(SessionVariables.Campuses));
        var buildingByCampus = [];
        var filteredFloors = [];

        function bindBuildings(campusId, selectedId) {
            $("#BuildingId").val('');
            $("#FloorId").val('');

            if (campusId) {
                buildingByCampus = buildingsList.filter(x => x.CampusId === campusId);
            } else {
                buildingByCampus = buildingsList;
            }
            var $sel = $("#BuildingId").empty();
            $sel.append('<option value="">Select a building...</option>');
            $.each(buildingByCampus, function () {
                $sel.append("<option value='" + this.Id + "'>" + this.BuildingName + "</option>");
            });

            if ((campusList.length === 1 || $("#CampusId").val()) && buildingByCampus.length === 1) {
                $("#BuildingId").val(buildingByCampus[0].Id);
                 bindFloors(campusId,  $("#BuildingId").val());
            }

            if (selectedId) {
                $("#BuildingId").val(selectedId);
                bindFloors(campusId, selectedId);
            }
        }

        function bindFloors(campusId, buildingId, selectedId) {
            $("#FloorId").val('');
            if (buildingId) {
                filteredFloors = floorList.filter(x => x.BuildingId === buildingId);
            } else if (campusId) {
                filteredFloors = floorList.filter(x => x.CampusId === campusId);
            } else {
                filteredFloors = floorList;
            }

            var $sel = $("#FloorId").empty();
            $sel.append('<option value="">Select a floor...</option>');
            $.each(filteredFloors, function () {
                $sel.append("<option value='" + this.Id + "'>" + this.FloorName + "</option>");
            });

            if ((buildingByCampus.length === 1 || $("#BuildingId").val()) && filteredFloors.length === 1) {
                $("#FloorId").val(filteredFloors[0].Id);
            }

            if (selectedId) {
                $("#FloorId").val(selectedId);
            }
        }

        $(document).on("change", "#CampusId", function () {
            bindBuildings($(this).val());
        });

        $(document).on("change", "#BuildingId", function () {
            bindFloors($('#CampusId').val(),$(this).val());
        });

        $(function () {
            if ('@Model.CampusId' !== null && '@Model.CampusId' !== '' && '@Model.BuildingId' !== null && '@Model.BuildingId' !== '') {
                bindBuildings('@Model.CampusId','@Model.BuildingId');
            } else if ('@Model.CampusId' !== null && '@Model.CampusId' !== '' && ('@Model.BuildingId' === null || '@Model.BuildingId' === '')) {
                bindBuildings('@Model.CampusId');
            }

            if ('@Model.CampusId' !== null && '@Model.CampusId' !== '' && '@Model.BuildingId' !== null && '@Model.BuildingId' !== '' && '@Model.FloorId' !== null && '@Model.FloorId' !== '') {
                bindFloors('@Model.CampusId','@Model.BuildingId', '@Model.FloorId');
            } else if ('@Model.CampusId' !== null && '@Model.CampusId' !== '' && '@Model.BuildingId' !== null && '@Model.BuildingId' !== '' && ('@Model.FloorId' !== null || '@Model.FloorId' !== '')) {
                bindFloors('@Model.CampusId', '@Model.BuildingId');
            }
        });
    </script>
}