@using PraiseCMS.Shared.Methods
@model PraiseCMS.DataAccess.Models.GivingDashboard

@{
    ViewBag.Title = "Giving History";
}

@if (!SessionVariables.CurrentUser.IsDonorOnly)
{
    @section leftsubheader{
        @Html.Partial("_MyGivingSubheader")
    }
}

<div class="card card-custom gutter-b">
    <div class="card-header">
        <div class="card-title">
            <h3 class="card-label">
                Giving History
            </h3>
        </div>
        <div class="card-toolbar">
            <a href="@Request.Url.PathAndQuery.Replace("/history", "/downloadgivinghistory")" class="btn-export btn btn-outline-primary btn-sm">Export CSV</a>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-12">
                @using (Html.BeginForm(RouteHelpers.CurrentAction, RouteHelpers.CurrentController, FormMethod.Get, new { @class = "form", role = "form" }))
                {
                    @Html.ValidationSummary("", new { @class = "text-danger" })

                    <div class="form-group row">
                        <div class="col-sm-6 col-lg-2">
                            <label>Start Date:</label>
                            <div class="input-group">
                                @Html.TextBoxFor(x => x.StartDate, new { @class = "form-control datepicker", name = "StartDate", autocomplete = "off", placeholder = "MM/DD/YYYY" })
                                <div class="input-group-append"><span class="input-group-text" id="basic-addon2"><i class="far fa-calendar-alt"></i></span></div>
                            </div>
                        </div>
                        <div class="col-sm-6 col-lg-2">
                            <label>End Date:</label>
                            <div class="input-group">
                                @Html.TextBoxFor(x => x.EndDate, new { @class = "form-control datepicker", name = "EndDate", autocomplete = "off", placeholder = "MM/DD/YYYY" })
                                <div class="input-group-append"><span class="input-group-text" id="basic-addon2"><i class="far fa-calendar-alt"></i></span></div>
                            </div>
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <label>Fund:</label>
                            @Html.DropDownListFor(x => x.FundId, Model.Funds.ToSelectList(x => x.Display, x => x.Id).OrderBy(x => x.Text), "Select a fund...", new { @class = "form-control select2", name = "Fund", style = "width:100%;" })
                        </div>
                        <div class="col-sm-6 col-lg-3">
                            <label>Campus:</label>
                            @Html.DropDownListFor(x => x.CampusId, Model.Campuses.ToSelectList(x => x.Display, x => x.Id).OrderBy(x => x.Text), "Select a campus...", new { @class = "form-control select2", name = "Campus", style = "width:100%;" })
                        </div>
                        <div class="col-sm-12 col-lg-2">
                            <button type="submit" class="btn btn-primary" style="margin-top:25px;">Filter Results</button>
                            <a href="/mygiving/history" class="btn btn-light-dark" style="margin-top:25px;">Clear</a>
                        </div>
                    </div>
                }
                <div class="separator separator-dashed my-5"></div>
                <table id="my_table" class="table table-striped table-bordered table-responsive-lg table-responsive-md table-responsive-sm table-responsive-xl" style="width:100%">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Fund</th>
                            <th>Campus</th>
                            <th>Payment Method</th>
                            <th class="text-right">Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model.MyGiving)
                        {
                            var paymentMethod = "-";
                            var amount = payment.Amount.ToCurrencyString();
                            var fund = Model.Funds.Any() ? Model.Funds.FirstOrDefault(x => x.Id.Equals(payment.FundId)) : null;
                            var campus = SessionVariables.Campuses.FirstOrDefault(x => x.Id.Equals(payment.CampusId));

                            if (payment.OfflinePaymentMethod.IsNotNullOrEmpty())
                            {
                                paymentMethod = payment.OfflinePaymentMethod;

                                if (payment.OfflinePaymentMethod == OfflinePaymentMethods.Check)
                                {
                                    paymentMethod = $"Check # {payment.CheckNumber}";
                                }
                            }
                            else
                            {
                                if (Model.PaymentMethods.Any(x => x.AccountGUID == payment.PaymentMethod))
                                {
                                    paymentMethod = Model.PaymentMethods.FirstOrDefault(x => x.AccountGUID == payment.PaymentMethod)?.PaymentMethodPreview;
                                }
                            }
                            <tr>
                                <td>
                                    @payment.CreatedDate.ToShortDateString()
                                </td>
                                <td>
                                    @if (fund != null)
                                    {
                                        <span>@fund.Name</span>
                                    }
                                </td>
                                <td>
                                    @if (campus != null)
                                    {
                                        <span>@campus.Name</span>
                                    }
                                </td>
                                <td>
                                    <span>@paymentMethod</span>
                                </td>
                                <td>
                                    @amount
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <table class="table table-bordered" style="width:100%">
                    <tbody>
                        <tr>
                            <td class="font-weight-bolder" colspan="4">Total</td>
                            <td class="font-weight-bolder text-right">@Model.MyGiving.Sum(x => x.Amount).ToCurrencyString()</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="card-footer">
        @if (SessionVariables.CurrentUser.Settings.PaperlessGiving)
        {
            <p class="text-right"><i class="far fa-check-circle fa-2x text-success mr-2"></i><a href="#" data-toggle="modal" data-target="#paperlessModal" class="btn btn-link-dark text-hover-primary font-weight-bold" style="margin-top:-10px;">Paperless Statements Enabled <i class="far fa-question-circle" data-toggle="tooltip" title="You will receive your giving statements via email."></i></a></p>
        }
        else
        {
            <p class="text-right"><a href="#" data-toggle="modal" data-target="#paperlessModal" class="btn btn-link-dark text-hover-primary font-weight-bold" style="margin-top:-10px;">Enable Paperless Statements <i class="far fa-question-circle" data-toggle="tooltip" title="Receive giving statements via email"></i></a></p>
        }
    </div>
</div>

<div class="modal fade" id="paperlessModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            @if (SessionVariables.CurrentUser.Settings.PaperlessGiving)
            {
                <div class="modal-body text-center py-10">
                    <h2>You're currently receiving paperless statements.</h2>
                    <p class="mt-10" style="font-size:18px;">Paperless means you can see your statements quickly when they're ready, and it helps @SessionVariables.CurrentChurch.Display use more of your giving effectively. We'll send your annual giving statements to the email address in your profile.</p>
                    <p>To receive printed statements in the mail instead, simply opt out of paperless statements.</p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-primary btn-sm mr-3" data-dismiss="modal">Keep Paperless</button>
                    <a href="/mygiving/enablepaperlessgivingstatements" data-ajax="true" data-ajax-method="get"> or opt out</a>
                </div>
            }
            else
            {
                <div class="modal-body text-center py-10">
                    <h2>You're currently receiving statements by mail.</h2>
                    <p class="mt-10" style="font-size:18px;">Consider switching to paperless statements, which will be sent to your email on file. <strong>Going paperless</strong> helps your donation go further by reducing costs for @SessionVariables.CurrentChurch.Display.</p>
                    <p>Prefer paper statements? No problem! We'll mail your giving statements to the address on file.</p>
                </div>
                <div class="modal-footer justify-content-center">
                    <a href="/mygiving/enablepaperlessgivingstatements" data-ajax="true" data-ajax-method="get" class="btn btn-primary btn-sm">Enable Paperless Statements</a> or <a href="#" data-dismiss="modal">keep paper statements</a>
                </div>
            }
        </div>
    </div>
</div>
<link href="~/Content/assets/css/datatables.min.css" rel="stylesheet" />
<style>
    #my_table_wrapper .wrapper {
        padding: 0 !important;
    }
</style>
<script src="~/Scripts/datatables.min.js"></script>
<script type="text/javascript">
    $(function () {
        $('#my_table').dataTable({
            responsive: true,
            bFilter: false,
            bInfo: true,
            bPaginate: true,
            bLengthChange: false,
            bAutoWidth: false,
            searching: false,
            ordering: false,
            pageLength: 50,
            orderable: false,
            "dom": '<"wrapper"flipt>'
        });

        $(".select2-selection").on("focus", function () {
            $(this).parent().parent().prev().select2("open");
        });

        $(document).on("click", ".btn-export", function () {
            StartLoading();
            setInterval(myTimer, 1000);
        });

        function myTimer() {
            var loadingProcess = getCookie("loadingProcess");
            if (loadingProcess === "true") {
                StopLoading();
                killInterval();
            }
        }

        function killInterval() {
            var numOfTimeouts = setTimeout('');
            for (let i = 0; i < numOfTimeouts; i++) clearTimeout(i);
        }

        function getCookie(cname) {
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }
    });
</script>